{
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for Lux Hotel application",
        "title": "API Documentation",
        "contact": {},
        "version": "1.0"
    },
    "paths": {
        "/api/hotel-list": {
            "get": {
                "description": "Fetches all hotels available in the system and returns them.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hotel"
                ],
                "summary": "Get a list of hotels",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved hotel list",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseOK"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/hotel/{id}": {
            "get": {
                "description": "Fetches the details of a hotel by its ID and returns the hotel information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hotel"
                ],
                "summary": "Get details of a specific hotel",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Hotel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved hotel details",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseOK"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Hotel not found",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/hotel/{id}/booking": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows a user to book a room in a specified hotel. Requires a valid JWT token for authentication and hotel ID in the URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hotel"
                ],
                "summary": "Book a room in a hotel",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Hotel ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Booking details",
                        "name": "booking_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.BookingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Room booked successfully",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseOK"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or Invalid request",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/order/payment": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Processes a payment order, requiring a valid JWT token for authentication. The request body should contain payment details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Process a payment order",
                "parameters": [
                    {
                        "description": "Payment details",
                        "name": "payment_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment processed successfully",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseOK"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/users/balance": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the current balance of the user from the database based on the user ID obtained from the JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get the balance of the logged-in user",
                "responses": {
                    "200": {
                        "description": "User balance retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseOK"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/users/balance/top-up": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows the user to top up their balance by providing the amount and other relevant information. The request must include a valid JWT token for authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Top up the balance of the logged-in user",
                "parameters": [
                    {
                        "description": "User top-up balance data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserTopUpBalancePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User balance topped up successfully",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseOK"
                        }
                    },
                    "400": {
                        "description": "Invalid top-up data",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/users/login": {
            "post": {
                "description": "Logs the user in by validating their credentials and returning a JWT token for authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login a user and return a JWT token",
                "parameters": [
                    {
                        "description": "User login data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserLoginPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseOK"
                        }
                    },
                    "400": {
                        "description": "Invalid login credentials",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/users/register": {
            "post": {
                "description": "Registers a new user in the system. It validates the input, checks for errors, and stores the user data in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserRegisterPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseOK"
                        }
                    },
                    "400": {
                        "description": "Invalid registration data",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entity.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.BookingRequest": {
            "type": "object",
            "properties": {
                "check_in": {
                    "type": "string"
                },
                "check_out": {
                    "type": "string"
                },
                "room_id": {
                    "type": "integer"
                }
            }
        },
        "entity.PaymentPayload": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string"
                }
            }
        },
        "entity.ResponseError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "entity.ResponseOK": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "entity.UserLoginPayload": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entity.UserRegisterPayload": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "entity.UserTopUpBalancePayload": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "bank_transfer": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}