definitions:
  entity.BookingRequest:
    properties:
      check_in:
        type: string
      check_out:
        type: string
      room_id:
        type: integer
    type: object
  entity.PaymentPayload:
    properties:
      order_id:
        type: string
      payment_method:
        type: string
    type: object
  entity.ResponseError:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  entity.ResponseOK:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
  entity.UserLoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  entity.UserRegisterPayload:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  entity.UserTopUpBalancePayload:
    properties:
      amount:
        type: number
      bank_transfer:
        type: string
    type: object
info:
  contact: {}
  description: This is the API documentation for Lux Hotel application
  title: API Documentation
  version: "1.0"
paths:
  /api/hotel-list:
    get:
      consumes:
      - application/json
      description: Fetches all hotels available in the system and returns them.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved hotel list
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ResponseError'
      summary: Get a list of hotels
      tags:
      - hotel
  /api/hotel/{id}:
    get:
      consumes:
      - application/json
      description: Fetches the details of a hotel by its ID and returns the hotel
        information.
      parameters:
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved hotel details
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "404":
          description: Hotel not found
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ResponseError'
      summary: Get details of a specific hotel
      tags:
      - hotel
  /api/hotel/{id}/booking:
    post:
      consumes:
      - application/json
      description: Allows a user to book a room in a specified hotel. Requires a valid
        JWT token for authentication and hotel ID in the URL.
      parameters:
      - description: Hotel ID
        in: path
        name: id
        required: true
        type: integer
      - description: Booking details
        in: body
        name: booking_request
        required: true
        schema:
          $ref: '#/definitions/entity.BookingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Room booked successfully
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "400":
          description: Invalid ID or Invalid request
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Book a room in a hotel
      tags:
      - hotel
  /api/order/payment:
    post:
      consumes:
      - application/json
      description: Processes a payment order, requiring a valid JWT token for authentication.
        The request body should contain payment details.
      parameters:
      - description: Payment details
        in: body
        name: payment_request
        required: true
        schema:
          $ref: '#/definitions/entity.PaymentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Payment processed successfully
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Process a payment order
      tags:
      - payment
  /api/users/balance:
    get:
      consumes:
      - application/json
      description: Retrieves the current balance of the user from the database based
        on the user ID obtained from the JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: User balance retrieved successfully
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get the balance of the logged-in user
      tags:
      - user
  /api/users/balance/top-up:
    post:
      consumes:
      - application/json
      description: Allows the user to top up their balance by providing the amount
        and other relevant information. The request must include a valid JWT token
        for authentication.
      parameters:
      - description: User top-up balance data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserTopUpBalancePayload'
      produces:
      - application/json
      responses:
        "200":
          description: User balance topped up successfully
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "400":
          description: Invalid top-up data
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Top up the balance of the logged-in user
      tags:
      - user
  /api/users/book/history:
    get:
      consumes:
      - application/json
      description: Fetches the booking history for the logged-in user based on the
        user ID extracted from the JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: User booking history retrieved successfully
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get user booking history
      tags:
      - user
  /api/users/login:
    post:
      consumes:
      - application/json
      description: Logs the user in by validating their credentials and returning
        a JWT token for authentication.
      parameters:
      - description: User login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "400":
          description: Invalid login credentials
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ResponseError'
      summary: Login a user and return a JWT token
      tags:
      - user
  /api/users/register:
    post:
      consumes:
      - application/json
      description: Registers a new user in the system. It validates the input, checks
        for errors, and stores the user data in the database.
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserRegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            $ref: '#/definitions/entity.ResponseOK'
        "400":
          description: Invalid registration data
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/entity.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/entity.ResponseError'
      summary: Register a new user
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
